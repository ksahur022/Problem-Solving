/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
     if(root==null)
        {
           return false;
        }
        Stack<TreeNode> stack=new Stack();
        Stack<Integer> sum_stack=new Stack();

        stack.add(root);
        sum_stack.add(targetSum-root.val);
        while(!stack.empty())
        {
            TreeNode node=stack.pop();
            int sum=sum_stack.pop();
            if(node.left==null && node.right==null && sum==0)
            {
                return true;
            }
            if(node.left!=null)
            {
                stack.add(node.left);
                sum_stack.add(sum-node.left.val);
            }
            if(node.right!=null)
            {
                stack.add(node.right);
                sum_stack.add(sum-node.right.val);
            }
        }
        return false;
    }
}



RECURSION


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root==null){
            return false;
        }
        if(root.left==null && root.right==null){
            return targetSum==root.val;  
        }
        return (hasPathSum(root.left,targetSum-root.val)||hasPathSum(root.right,targetSum-root.val));
    }
}
