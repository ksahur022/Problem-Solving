class Solution {
    public int minPathSum(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int[][] dp=new int[m][n];
        dp[0][0]=grid[0][0];

        
        for (int i=1;i<n;i++) {
            dp[0][i]=dp[0][i-1]+grid[0][i];
        }
        for (int i=1;i<m;i++) {
            dp[i][0]=dp[i-1][0]+grid[i][0];
        }
        for (int i=1;i<m;i++) {
            for (int j=1;j<n;j++) {
                dp[i][j]=grid[i][j] + Math.min(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[m-1][n-1];
    }
}


//----------MEMOIZATION----------

/*class Solution {
    public int minPathSum(int[][] grid) {
        int[][] dp=new int[grid.length][grid[0].length];
        return helper(grid,0,0,dp);
    }

    public int helper(int[][] grid,int row,int col,int[][] dp){
        if (dp[row][col]!=0) {
            return dp[row][col];
        }
        if (row==grid.length-1 && col==grid[0].length-1){
            return grid[row][col];
        }
        int dpath=Integer.MAX_VALUE;
        if (row<grid.length-1) {
            dpath=grid[row][col]+helper(grid,row+1,col,dp);
        }
        int rpath= Integer.MAX_VALUE;
        if (col<grid[0].length-1) {
            rpath=grid[row][col] + helper(grid,row,col+1,dp);
        }

        dp[row][col] = Math.min(dpath,rpath);
        return dp[row][col];
    }
}
*/


//----------RECURSION----------------

/*class Solution {
    public int minPathSum(int[][] grid) {
        return helper(grid,0,0);
    }

    public int helper(int[][] grid, int row, int col) {
        if (row==grid.length-1 && col==grid[0].length-1) {
            return grid[row][col];
        }
        if (row==grid.length-1) {
            return grid[row][col]+helper(grid,row,col+1);
        }
        if (col==grid[0].length-1) {
            return grid[row][col]+helper(grid,row+1,col);
        }
        int dpath=grid[row][col]+helper(grid,row+1,col);
        int rpath=grid[row][col]+helper(grid,row,col1);
        return Math.min(dpath,rpath);
    }
}*/
