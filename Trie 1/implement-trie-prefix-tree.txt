class Node{
    Node[] children=new Node[26];
    boolean eod=false;
    
    Node(){
        for(int i=0;i<26;i++){
            children[i]=null;
        }
    }
}

class Trie {
    
    Node root;
    public Trie() {
        root = new Node();
        
    }
    
    public void insert(String words) {
         Node curr=root;
        for(int i=0;i<words.length();i++){
            int idx=words.charAt(i)-'a';
            if(curr.children[idx]==null){
                curr.children[idx]=new Node();
            }
            if(i==words.length()-1){
                curr.children[idx].eod=true;
            }
            curr=curr.children[idx];
        }
    }
    
    public boolean search(String key) {
        Node curr=root;
        for(int i=0;i<key.length();i++){
            int idx=key.charAt(i)-'a';
            if(curr.children[idx]==null){
                return false;
            }
            if(i==key.length()-1 && curr.children[idx].eod==false){
                return false;
            }
            curr=curr.children[idx];
        }
        return true;
    }
    
    public boolean startsWith(String prefix) {
        Node curr = root;
        for (char c : prefix.toCharArray()) {
            int index = c - 'a';
            if (curr.children[index] == null) {
                return false;
            }
            curr = curr.children[index];
        }
        return true;
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */