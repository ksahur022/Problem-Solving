class Solution {
    public int equalSubstring(String s, String t, int maxCost) {
        int maxLen=0;
        int n=s.length();
        int low=0;
        int high=n;
        while(low <= high) {
            int mid=low+(high-low)/2;
            int curr=getCurrMinCost(s, t, maxCost, mid);

            if(curr > maxCost) {
               high=mid - 1;
            }
            else {
                low = mid + 1;
                maxLen = mid;
            }
        }
        return maxLen;
    }

    int getCurrMinCost(String s, String t, int maxCost, int mid) {
        int minCost = 0;
        int n = s.length();

        for(int i = 0; i < mid; i++) {
            minCost += Math.abs((int)s.charAt(i) - (int)t.charAt(i));
        }

        int currCost = minCost;
        for(int i = mid; i < n; i++) {
            int lc=Math.abs((int)s.charAt(i - mid) - (int)t.charAt(i - mid));
            int rc=Math.abs((int)s.charAt(i) - (int)t.charAt(i));

            currCost+=rc;
            currCost-=lc;

            minCost=Math.min(minCost, currCost);
        }
        return minCost;
    }
}
