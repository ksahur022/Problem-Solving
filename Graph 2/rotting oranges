class Solution {    
    public int orangesRotting(int[][] grid) {
        if(grid == null || grid.length == 0) return -1;
        
        for(int i=0; i<grid.length; i++) {
            for(int j=0; j<grid[0].length; j++) {
                if(grid[i][j] == 2) helper(grid, i, j, 2);
            }
        }
        
        int minutes = 2;
        for(int[] row : grid) {
            for(int cell : row) {
                if(cell == 1) return -1;
                minutes = Math.max(minutes, cell);
            }
        }
        
        return minutes - 2;
    }
    
    private void helper(int[][] grid, int i, int j, int m) {
        if(i < 0 || i >= grid.length 
          || j < 0 || j >= grid[0].length 
          || grid[i][j] == 0 
          || (1 < grid[i][j] && grid[i][j] < m) 
          ) return;
        else {
            grid[i][j] = m;
            helper(grid,i-1,j,m+1);
            helper(grid,i+1,j,m+1);
            helper(grid,i,j-1,m+1);
            helper(grid,i,j+1,m+1);
        }
    }
}
