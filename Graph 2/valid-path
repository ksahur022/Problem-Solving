public class Solution {
    public int knight(int A, int B, int C, int D, int E, int F) {
        int[][] grid = new int[A + 1][B + 1];
        boolean[][] visited = new boolean[A + 1][B + 1];

        Queue<int[]> q = new LinkedList<>();
        visited[C][D] = true;
        q.offer(new int[]{0, C, D});

        int[] di = {-2, -2, 2, 2, -1, 1, -1, 1};
        int[] dj = {-1, 1, -1, 1, 2, 2, -2, -2};

        while (!q.isEmpty()) {
            int[] current = q.poll();
            int dist = current[0];
            int ci = current[1];
            int cj = current[2];

            if (ci == E && cj == F) {
                return dist;
            }

            for (int k = 0; k < 8; k++) {
                int ni = ci + di[k];
                int nj = cj + dj[k];

                if (ni >= 1 && nj >= 1 && ni <= A && nj <= B && !visited[ni][nj]) {
                    visited[ni][nj] = true;
                    q.offer(new int[]{dist + 1, ni, nj});
                }
            }
        }

        return -1;
    }
}
