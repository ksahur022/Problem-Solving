class Solution
{   
    public static void dfs(int n,ArrayList<ArrayList<Integer>> adj,int[] vis,Stack<Integer> st){
        vis[n]=1;
        for(Integer it:adj.get(n)){
            if(vis[it]==0){
                dfs(it,adj,vis,st);
            }
        }
            st.push(n);
        
    }
    public static void dfsnew(int n,ArrayList<ArrayList<Integer>> adj,int[] vis){
        vis[n]=1;
        for(Integer it:adj.get(n)){
            if(vis[it]==0){
                dfsnew(it,adj,vis);
            }
            
        }
    }
    
    //Function to find number of strongly connected components in the graph.
    public int kosaraju(int v, ArrayList<ArrayList<Integer>> adj)
    {
        int cnt=0;
        //code here
        int[] vis=new int[v];
        Stack<Integer> st=new Stack<>();
        for(int i=0;i<v;i++){
            if(vis[i]==0){
                dfs(i,adj,vis,st);
            }
        }
        ArrayList<ArrayList<Integer>> tadj= new ArrayList<ArrayList<Integer>>();
        for(int i=0;i<v;i++){
            tadj.add(new ArrayList<Integer>());
        }
        for(int i=0;i<v;i++){
            vis[i]=0;
            for (Integer it : adj.get(i)) {
                tadj.get(it).add(i);
            }
        }
            while(!st.isEmpty()){
                int node=st.peek();
                st.pop();
                if(vis[node]==0){
                    cnt++;
                    dfsnew(node,tadj,vis);
                }
          
        }
        return cnt;
    }
}
