class Solution {
    public boolean isBipartite(int[][] graph) {
        int[] vis=new int[graph.length];
        for(int i=0;i<vis.length;i++){
            vis[i]=-1;
        }
        for(int i=0;i<vis.length;i++){
            if(vis[i]==-1){
                if(!bfs(vis,i,graph)){
                    return false;
                }
            }
        }
        return true;
    }
    public boolean bfs(int[] vis,int i,int[][] graph){
        Queue<Integer> q=new LinkedList<>();
        vis[i]=0;
        q.add(i);
        while(!q.isEmpty()){
            int node=q.poll();
            for(int j:graph[node]){
                if(vis[j]==-1){
                    if(vis[node]==1){
                        vis[j]=0;
                    }
                    else{
                        vis[j]=1;
                    }
                    q.add(j);
                }
                else if(vis[node]==vis[j]){
                    return false;
                }
            }
        }
        return true;
    }
}
