class Solution {
    LinkedList<Integer>[] list;
    public int findShortestCycle(int n,int[][] edges) {
        
        list = new LinkedList[n];
        for(int i = 0; i < n; i++)
        {
            list[i] = new LinkedList<>();
        }
        for(int[] a : edges){
            int v=a[0],u=a[1];
            list[v].add(u);
            list[u].add(v);
        }
        int max = 1000000000;
        int[] dp = new int[n];
        for(int i = 0; i < n; i++){
            dp = new int[n];
            Queue< Integer > queue = new LinkedList<>();
            queue.add(i);
            dp[i] = 1;
            while(!queue.isEmpty()){
                int l=queue.remove();
                for(Integer k:list[l]){
                    if(dp[k]!=0 && dp[k]<dp[l]) continue;
                    if(dp[k] == 0){
                        dp[k] = dp[l] + 1;
                        queue.add(k);
                    }
                    else if(dp[k] == dp[l]){
                        max = Math.min(max,dp[l]+dp[k]-1);                          
                    }
                    else if(dp[l] + 1 == dp[k]){
                        max = Math.min(max,(dp[k]-1)*2);
                    }
                }
            }

        }

        if(max == 1000000000) return -1;

        return  max;
    }
}
