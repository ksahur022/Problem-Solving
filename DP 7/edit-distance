class Solution {    
    public int solve(String word1, String word2, int i,int j,int[][] dp){
    if(i<0){
        return j+1;
    }
    if(j<0){
        return i+1;
    }     
    if(dp[i][j] != -1)
        return dp[i][j];
        
        if(word1.charAt(i) == word2.charAt(j))
            return dp[i][j] = 0 + solve(word1,word2,i-1,j-1,dp);
        
        else
            return dp[i][j] = Math.min(1 + solve(word1,word2,i,j-1,dp), Math.min(1 + solve(word1,word2,i-1,j,dp),1 + solve(word1,word2,i-1,j-1,dp)));
           
    }
    
    public int minDistance(String word1, String word2) {
        int[][] dp = new int[word1.length()][word2.length()];
        for(int[] row: dp)
            Arrays.fill(row,-1);
        return solve(word1,word2,word1.length()-1,word2.length()-1,dp);
    }
}

/*class Solution {
    public int solve(String word1, String word2, int i,int j){
     if(i<0){
        return j+1;
     }           
    if(j<0){
        return i+1;
    }
           
    if(word1.charAt(i) == word2.charAt(j)){
        return 0 + solve(word1,word2,i-1,j-1);
    }    
        
    else
        return Math.min(1 + solve(word1,word2,i,j-1), Math.min(1 + solve(word1,word2,i-1,j),1 + solve(word1,word2,i-1,j-1)));
           
    }
    
    public int minDistance(String word1, String word2) {
        return solve(word1,word2,word1.length()-1,word2.length()-1);
    }
}*/
