class Solution {
    public int minSwapsCouples(int[] row) {
        int n = row.length;
        DisjointSet ds = new DisjointSet(n / 2);
        for (int i=0;i<n-1;i+=2) {
            ds.union(getGroup(row[i]),getGroup(row[i+1]));
        }
        return(n/2)-ds.getNoOfGroups();
    }

    private int getGroup(int n) {
        return n / 2;
    }


    class DisjointSet {
        int[] parent;
        int[] componentSize;
        int size;

        DisjointSet(int n) {
            size = n;
            parent = new int[n];
            componentSize = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                componentSize[i] = 1;
            }
        }

        int getNoOfGroups() {
            return size;
        }

        boolean isConnected(int x, int y) {
            return find(x) == find(y);
        }

        void union(int x, int y) {
            if (x == y) return;
            int rootX = find(x);
            int rootY= find(y);
            if (rootX == rootY) return;
            if (componentSize[rootX] >= componentSize[rootY]) {
                parent[rootY] = rootX;
                componentSize[rootX] += componentSize[rootY];
                componentSize[rootY] = 0; 
            } else {
                parent[rootX] = rootY;
                componentSize[rootY] += componentSize[rootX];
                componentSize[rootX] = 0;
            }
            size--;
        }

        int find(int x) {
            int root = x;
            while (root != parent[root]) {
                root = parent[root];
            }
            while (x != root) {
                int next = parent[x];
                parent[x] = root;
                x = next;
            }
            return root;
        }
    }
}
