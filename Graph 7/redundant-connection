class Solution {
    private int[] rank;
    private int[] parent;
    public int[] findRedundantConnection(int[][] edges) {
        int n=edges.length;
        parent=new int[n+1];
        rank=new int[n+1];
        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            if(find(u)==find(v)){
                return edge;
            }
            union(u,v);
        }
        return new int[2];
    }
    public int find(int x){
        if(parent[x]==x){
            return x;
        }
        return find(parent[x]);
    }
    public void union(int x,int y){
        int rx=find(x);
        int ry=find(y);
        if(rx==ry){
            return;
        }
        if(rank[rx]<rank[ry]){
            parent[rx]=ry;
        }
        else if(rank[rx]>rank[ry]){
            parent[ry]=rx;
        }
        else{
            parent[ry]=rx;
            rank[rx]++;
        }
    }
}
