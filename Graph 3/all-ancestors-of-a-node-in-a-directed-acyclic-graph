class Solution {
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
       ArrayList<Integer>[] adj=new ArrayList[n];
       for(int i=0;i<n;i++){
        adj[i]=new ArrayList<>();
       }
       for(int[] i:edges){
        int u=i[0];
        int v=i[1];
        adj[v].add(u);
       }
       List<List<Integer>> ans=new ArrayList<>();
       for(int i=0;i<n;i++){
        ans.add(new ArrayList<>());
       }
       for(int i=0;i<n;i++){
        boolean[] vis=new boolean[n];
        dfs(i,adj,vis);
        for(int j=0;j<n;j++){
            if(i!=j && vis[j]){
               ans.get(i).add(j);
            }
        }
       }
       return ans;

    }
    public static void dfs(int node,ArrayList<Integer>[] adj,boolean[] vis){
        if(vis[node]){
            return ;
        }
        vis[node]=true;
        for(int i:adj[node]){
            if(!vis[i]){
            dfs(i,adj,vis);
        }
    }
}
}
