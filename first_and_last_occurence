class Solution {
    public int[] searchRange(int[] nums, int target) {
        int n=nums.length;
        int[] ans=new int[2];
       // ans[0]=-1;
        //ans[1]=-1;
        ans[0]=lowerBound(nums,target);
        ans[1]=upperBound(nums,target);
        return ans;
    }
    public int lowerBound(int[] nums,int t){
        int l=0;
        int r=-1;
        int h=nums.length-1;
        while(l<=h){
            int mid=l+(h-l)/2;
            if(nums[mid]==t){
                r=mid;
                h=r-1;

            }
            else if(nums[mid]>t){
                  h=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        return r;
    }
     public int upperBound(int[] nums,int t){
        int l=0;
        int r=-1;
        int h=nums.length-1;
        while(l<=h){
            int mid=l+(h-l)/2;
            if(nums[mid]==t){
                r=mid;
                l=r+1;

            }
            else if(nums[mid]>t){
                  h=mid-1;
            }
            else{
                l=mid+1;
            }
        }
        return r;
    }
}
