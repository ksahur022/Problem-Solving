class Pair implements Comparable<Pair>{
    int v;
    int wt;
    Pair(int v,int wt){
        this.v=v;
        this.wt=wt;
    }
    public int compareTo(Pair that){
        return Integer.compare(this.wt,that.wt);
    }
}
class Solution {
    public int[] minimumTime(int n, int[][] edges, int[] diss) {
        ArrayList<ArrayList<Pair>> adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<>());
        }
        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            int w=edge[2];
            adj.get(u).add(new Pair(v,w));
            adj.get(v).add(new Pair(u,w));           
        }
        PriorityQueue<Pair> pq=new PriorityQueue<>();
        pq.add(new Pair(0,0));
        int[] ans=new int[n];
        Arrays.fill(ans,Integer.MAX_VALUE);
        ans[0]=0;
        while(!pq.isEmpty()){
            Pair cur=pq.poll();
            int t=cur.wt;
            int d=cur.v;
            if(t>ans[d]){
                continue;
            }

            for(Pair nei:adj.get(d)){
                int nn=nei.v;
                int et=nei.wt;
                if(t+et<diss[nn]){
                    if(t+et<ans[nn]){
                    ans[nn]=t+et;
                    pq.add(new Pair(nn,t+et));
                }
                }
            }
        }
        for(int i=0;i<n;i++){
            if(ans[i]==Integer.MAX_VALUE){
                ans[i]=-1;
            }
        }
        return ans;
    }
}
