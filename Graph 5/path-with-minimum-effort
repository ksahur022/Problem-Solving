class Solution {
    public int minimumEffortPath(int[][] heights) {
        int n=heights.length;
        int m=heights[0].length;

        PriorityQueue<Pair> pq=new PriorityQueue<>();
        pq.add(new Pair(0,0,0));

        int[][] diff=new int[n][m];
        Arrays.stream(diff).forEach(row->Arrays.fill(row, Integer.MAX_VALUE));
        diff[0][0]=0;

        boolean[][] vis= new boolean[n][m];

        while(!pq.isEmpty()){
            Pair curr = pq.poll();
            int i=curr.i;
            int j=curr.j;
            int d=curr.maxDiff;

            if(i==n-1&&j==m-1){
                return d;
            }
            vis[i][j] = true;

            int[] dx={1, 0, -1, 0};
            int[] dy={0, 1, 0, -1};

            for(int k=0;k<dx.length; k++){
                int x=i+dx[k];
                int y=j+dy[k];

                if(x<0 || x==n || y<0 || y==m){
                    continue;
                }
                if(vis[x][y]){
                    continue;
                }
                int newDiff = Math.abs(heights[i][j]-heights[x][y]);
                int maxDiff = Math.max(diff[i][j],newDiff);

                if(diff[x][y]>maxDiff){
                    diff[x][y]=maxDiff;
                    pq.add(new Pair(x,y,maxDiff));
                }
            }
        }
        return diff[n-1][m-1];
    }
}
class Pair implements Comparable <Pair>{
    int i;
    int j;
    int maxDiff;

    Pair(int i, int j, int maxDiff){
        this.i = i;
        this.j = j;
        this.maxDiff = maxDiff;
    }
    public int compareTo(Pair that){
        return this.maxDiff - that.maxDiff;
    }
}
